/*
* generated by Xtext
*/
package featureSeqDiag.sdedit.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SD_languageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SDEditModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SDEditModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsSDEditObjParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsSDEditCombinableDiagEltParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//SDEditModel:
		//	elements+=SDEditObj* elements+=SDEditCombinableDiagElt*;
		public ParserRule getRule() { return rule; }

		//elements+=SDEditObj* elements+=SDEditCombinableDiagElt*
		public Group getGroup() { return cGroup; }

		//elements+=SDEditObj*
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }

		//SDEditObj
		public RuleCall getElementsSDEditObjParserRuleCall_0_0() { return cElementsSDEditObjParserRuleCall_0_0; }

		//elements+=SDEditCombinableDiagElt*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//SDEditCombinableDiagElt
		public RuleCall getElementsSDEditCombinableDiagEltParserRuleCall_1_0() { return cElementsSDEditCombinableDiagEltParserRuleCall_1_0; }
	}

	public class SDEditObjElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SDEditObj");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cObjNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cObjNameSDEditObjnameParserRuleCall_0_0 = (RuleCall)cObjNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeIDTerminalRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Keyword cAKeyword_3_1_0 = (Keyword)cAlternatives_3_1.eContents().get(0);
		private final Keyword cPKeyword_3_1_1 = (Keyword)cAlternatives_3_1.eContents().get(1);
		private final Keyword cRKeyword_3_1_2 = (Keyword)cAlternatives_3_1.eContents().get(2);
		private final Keyword cXKeyword_3_1_3 = (Keyword)cAlternatives_3_1.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//SDEditObj:
		//	objName=SDEditObjname ":" type=ID ("[" ("a" | "p" | "r" | "x") "]")?;
		public ParserRule getRule() { return rule; }

		//objName=SDEditObjname ":" type=ID ("[" ("a" | "p" | "r" | "x") "]")?
		public Group getGroup() { return cGroup; }

		//objName=SDEditObjname
		public Assignment getObjNameAssignment_0() { return cObjNameAssignment_0; }

		//SDEditObjname
		public RuleCall getObjNameSDEditObjnameParserRuleCall_0_0() { return cObjNameSDEditObjnameParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=ID
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_2_0() { return cTypeIDTerminalRuleCall_2_0; }

		//("[" ("a" | "p" | "r" | "x") "]")?
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//"a" | "p" | "r" | "x"
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//"a"
		public Keyword getAKeyword_3_1_0() { return cAKeyword_3_1_0; }

		//"p"
		public Keyword getPKeyword_3_1_1() { return cPKeyword_3_1_1; }

		//"r"
		public Keyword getRKeyword_3_1_2() { return cRKeyword_3_1_2; }

		//"x"
		public Keyword getXKeyword_3_1_3() { return cXKeyword_3_1_3; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
	}

	public class SDEditObjnameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SDEditObjname");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//SDEditObjname:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class SDEditCombinableDiagEltElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SDEditCombinableDiagElt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSDEditCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSDEditCombinedFragmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SDEditCombinableDiagElt:
		//	SDEditCall | SDEditCombinedFragment;
		public ParserRule getRule() { return rule; }

		//SDEditCall | SDEditCombinedFragment
		public Alternatives getAlternatives() { return cAlternatives; }

		//SDEditCall
		public RuleCall getSDEditCallParserRuleCall_0() { return cSDEditCallParserRuleCall_0; }

		//SDEditCombinedFragment
		public RuleCall getSDEditCombinedFragmentParserRuleCall_1() { return cSDEditCombinedFragmentParserRuleCall_1; }
	}

	public class SDEditCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SDEditCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCallerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cCallerSDEditObjnameCrossReference_0_0 = (CrossReference)cCallerAssignment_0.eContents().get(0);
		private final RuleCall cCallerSDEditObjnameIDTerminalRuleCall_0_0_1 = (RuleCall)cCallerSDEditObjnameCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cReturnMessageAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cReturnMessageIDTerminalRuleCall_2_0_0 = (RuleCall)cReturnMessageAssignment_2_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cCalledAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cCalledSDEditObjnameCrossReference_3_0 = (CrossReference)cCalledAssignment_3.eContents().get(0);
		private final RuleCall cCalledSDEditObjnameIDTerminalRuleCall_3_0_1 = (RuleCall)cCalledSDEditObjnameCrossReference_3_0.eContents().get(1);
		private final Keyword cFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cParamsAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cParamsIDTerminalRuleCall_7_0_0 = (RuleCall)cParamsAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cParamListsAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cParamListsIDTerminalRuleCall_7_1_1_0 = (RuleCall)cParamListsAssignment_7_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//SDEditCall:
		//	caller=[SDEditObjname] ":" (returnMessage=ID "=")? called=[SDEditObjname] "." name=ID "(" (params=ID (","
		//	paramLists+=ID)*)? ")";
		public ParserRule getRule() { return rule; }

		//caller=[SDEditObjname] ":" (returnMessage=ID "=")? called=[SDEditObjname] "." name=ID "(" (params=ID (","
		//paramLists+=ID)*)? ")"
		public Group getGroup() { return cGroup; }

		//caller=[SDEditObjname]
		public Assignment getCallerAssignment_0() { return cCallerAssignment_0; }

		//[SDEditObjname]
		public CrossReference getCallerSDEditObjnameCrossReference_0_0() { return cCallerSDEditObjnameCrossReference_0_0; }

		//ID
		public RuleCall getCallerSDEditObjnameIDTerminalRuleCall_0_0_1() { return cCallerSDEditObjnameIDTerminalRuleCall_0_0_1; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//(returnMessage=ID "=")?
		public Group getGroup_2() { return cGroup_2; }

		//returnMessage=ID
		public Assignment getReturnMessageAssignment_2_0() { return cReturnMessageAssignment_2_0; }

		//ID
		public RuleCall getReturnMessageIDTerminalRuleCall_2_0_0() { return cReturnMessageIDTerminalRuleCall_2_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }

		//called=[SDEditObjname]
		public Assignment getCalledAssignment_3() { return cCalledAssignment_3; }

		//[SDEditObjname]
		public CrossReference getCalledSDEditObjnameCrossReference_3_0() { return cCalledSDEditObjnameCrossReference_3_0; }

		//ID
		public RuleCall getCalledSDEditObjnameIDTerminalRuleCall_3_0_1() { return cCalledSDEditObjnameIDTerminalRuleCall_3_0_1; }

		//"."
		public Keyword getFullStopKeyword_4() { return cFullStopKeyword_4; }

		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }

		//(params=ID ("," paramLists+=ID)*)?
		public Group getGroup_7() { return cGroup_7; }

		//params=ID
		public Assignment getParamsAssignment_7_0() { return cParamsAssignment_7_0; }

		//ID
		public RuleCall getParamsIDTerminalRuleCall_7_0_0() { return cParamsIDTerminalRuleCall_7_0_0; }

		//("," paramLists+=ID)*
		public Group getGroup_7_1() { return cGroup_7_1; }

		//","
		public Keyword getCommaKeyword_7_1_0() { return cCommaKeyword_7_1_0; }

		//paramLists+=ID
		public Assignment getParamListsAssignment_7_1_1() { return cParamListsAssignment_7_1_1; }

		//ID
		public RuleCall getParamListsIDTerminalRuleCall_7_1_1_0() { return cParamListsIDTerminalRuleCall_7_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}

	public class SDEditCombinedFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SDEditCombinedFragment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSDEditAltParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSDEditLoopParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSDEditOptParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SDEditCombinedFragment:
		//	SDEditAlt | SDEditLoop | SDEditOpt;
		public ParserRule getRule() { return rule; }

		//SDEditAlt | SDEditLoop | SDEditOpt
		public Alternatives getAlternatives() { return cAlternatives; }

		//SDEditAlt
		public RuleCall getSDEditAltParserRuleCall_0() { return cSDEditAltParserRuleCall_0; }

		//SDEditLoop
		public RuleCall getSDEditLoopParserRuleCall_1() { return cSDEditLoopParserRuleCall_1; }

		//SDEditOpt
		public RuleCall getSDEditOptParserRuleCall_2() { return cSDEditOptParserRuleCall_2; }
	}

	public class SDEditAltElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SDEditAlt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCAltKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAltAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondAltConditionParserRuleCall_1_0 = (RuleCall)cCondAltAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConseqAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConseqSDEditCombinableDiagEltParserRuleCall_3_0 = (RuleCall)cConseqAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAltersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAltersSDEditCombinableDiagEltParserRuleCall_4_1_0 = (RuleCall)cAltersAssignment_4_1.eContents().get(0);
		private final Keyword cCKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SDEditAlt:
		//	"[c:alt" condAlt=Condition "]" conseq+=SDEditCombinableDiagElt+ ("--[else]" alters+=SDEditCombinableDiagElt*)+ "[/c]";
		public ParserRule getRule() { return rule; }

		//"[c:alt" condAlt=Condition "]" conseq+=SDEditCombinableDiagElt+ ("--[else]" alters+=SDEditCombinableDiagElt*)+ "[/c]"
		public Group getGroup() { return cGroup; }

		//"[c:alt"
		public Keyword getCAltKeyword_0() { return cCAltKeyword_0; }

		//condAlt=Condition
		public Assignment getCondAltAssignment_1() { return cCondAltAssignment_1; }

		//Condition
		public RuleCall getCondAltConditionParserRuleCall_1_0() { return cCondAltConditionParserRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }

		//conseq+=SDEditCombinableDiagElt+
		public Assignment getConseqAssignment_3() { return cConseqAssignment_3; }

		//SDEditCombinableDiagElt
		public RuleCall getConseqSDEditCombinableDiagEltParserRuleCall_3_0() { return cConseqSDEditCombinableDiagEltParserRuleCall_3_0; }

		//("--[else]" alters+=SDEditCombinableDiagElt*)+
		public Group getGroup_4() { return cGroup_4; }

		//"--[else]"
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }

		//alters+=SDEditCombinableDiagElt*
		public Assignment getAltersAssignment_4_1() { return cAltersAssignment_4_1; }

		//SDEditCombinableDiagElt
		public RuleCall getAltersSDEditCombinableDiagEltParserRuleCall_4_1_0() { return cAltersSDEditCombinableDiagEltParserRuleCall_4_1_0; }

		//"[/c]"
		public Keyword getCKeyword_5() { return cCKeyword_5; }
	}

	public class SDEditLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SDEditLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondLoopAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondLoopConditionParserRuleCall_1_0 = (RuleCall)cCondLoopAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodySDEditCombinableDiagEltParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cCKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SDEditLoop:
		//	"[c:loop" condLoop=Condition "]" body+=SDEditCombinableDiagElt+ "[/c]";
		public ParserRule getRule() { return rule; }

		//"[c:loop" condLoop=Condition "]" body+=SDEditCombinableDiagElt+ "[/c]"
		public Group getGroup() { return cGroup; }

		//"[c:loop"
		public Keyword getCLoopKeyword_0() { return cCLoopKeyword_0; }

		//condLoop=Condition
		public Assignment getCondLoopAssignment_1() { return cCondLoopAssignment_1; }

		//Condition
		public RuleCall getCondLoopConditionParserRuleCall_1_0() { return cCondLoopConditionParserRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }

		//body+=SDEditCombinableDiagElt+
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//SDEditCombinableDiagElt
		public RuleCall getBodySDEditCombinableDiagEltParserRuleCall_3_0() { return cBodySDEditCombinableDiagEltParserRuleCall_3_0; }

		//"[/c]"
		public Keyword getCKeyword_4() { return cCKeyword_4; }
	}

	public class SDEditOptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SDEditOpt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCOptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondOptAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondOptConditionParserRuleCall_1_0 = (RuleCall)cCondOptAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOptsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOptsSDEditCombinableDiagEltParserRuleCall_3_0 = (RuleCall)cOptsAssignment_3.eContents().get(0);
		private final Keyword cCKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SDEditOpt:
		//	"[c:opt" condOpt=Condition "]" opts+=SDEditCombinableDiagElt+ "[/c]";
		public ParserRule getRule() { return rule; }

		//"[c:opt" condOpt=Condition "]" opts+=SDEditCombinableDiagElt+ "[/c]"
		public Group getGroup() { return cGroup; }

		//"[c:opt"
		public Keyword getCOptKeyword_0() { return cCOptKeyword_0; }

		//condOpt=Condition
		public Assignment getCondOptAssignment_1() { return cCondOptAssignment_1; }

		//Condition
		public RuleCall getCondOptConditionParserRuleCall_1_0() { return cCondOptConditionParserRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }

		//opts+=SDEditCombinableDiagElt+
		public Assignment getOptsAssignment_3() { return cOptsAssignment_3; }

		//SDEditCombinableDiagElt
		public RuleCall getOptsSDEditCombinableDiagEltParserRuleCall_3_0() { return cOptsSDEditCombinableDiagEltParserRuleCall_3_0; }

		//"[/c]"
		public Keyword getCKeyword_4() { return cCKeyword_4; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCondLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCondLeftConditionElmParserRuleCall_0_0 = (RuleCall)cCondLeftAssignment_0.eContents().get(0);
		private final Assignment cConlistRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConlistRightConditionlistRightParserRuleCall_1_0 = (RuleCall)cConlistRightAssignment_1.eContents().get(0);
		
		//Condition:
		//	condLeft+=ConditionElm+ conlistRight+=ConditionlistRight*;
		public ParserRule getRule() { return rule; }

		//condLeft+=ConditionElm+ conlistRight+=ConditionlistRight*
		public Group getGroup() { return cGroup; }

		//condLeft+=ConditionElm+
		public Assignment getCondLeftAssignment_0() { return cCondLeftAssignment_0; }

		//ConditionElm
		public RuleCall getCondLeftConditionElmParserRuleCall_0_0() { return cCondLeftConditionElmParserRuleCall_0_0; }

		//conlistRight+=ConditionlistRight*
		public Assignment getConlistRightAssignment_1() { return cConlistRightAssignment_1; }

		//ConditionlistRight
		public RuleCall getConlistRightConditionlistRightParserRuleCall_1_0() { return cConlistRightConditionlistRightParserRuleCall_1_0; }
	}

	public class ConditionlistRightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionlistRight");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cISNOTKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cISKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cExclamationMarkEqualsSignKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cEqualsSignEqualsSignKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Keyword cLessThanSignKeyword_0_4 = (Keyword)cAlternatives_0.eContents().get(4);
		private final Keyword cGreaterThanSignKeyword_0_5 = (Keyword)cAlternatives_0.eContents().get(5);
		private final Keyword cLessThanSignEqualsSignKeyword_0_6 = (Keyword)cAlternatives_0.eContents().get(6);
		private final Keyword cGreaterThanSignEqualsSignKeyword_0_7 = (Keyword)cAlternatives_0.eContents().get(7);
		private final Keyword cExclamationMarkKeyword_0_8 = (Keyword)cAlternatives_0.eContents().get(8);
		private final Keyword cVerticalLineVerticalLineKeyword_0_9 = (Keyword)cAlternatives_0.eContents().get(9);
		private final Keyword cAmpersandAmpersandKeyword_0_10 = (Keyword)cAlternatives_0.eContents().get(10);
		private final Keyword cAndKeyword_0_11 = (Keyword)cAlternatives_0.eContents().get(11);
		private final Keyword cCircumflexAccentKeyword_0_12 = (Keyword)cAlternatives_0.eContents().get(12);
		private final Keyword cOrKeyword_0_13 = (Keyword)cAlternatives_0.eContents().get(13);
		private final Assignment cCondRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondRightConditionElmParserRuleCall_1_0 = (RuleCall)cCondRightAssignment_1.eContents().get(0);
		
		//ConditionlistRight:
		//	("IS NOT" | "IS" | "!=" | "==" | "<" | ">" | "<=" | ">=" | "!" | "||" | "&&" | "and" | "^" | "or")
		//	condRight=ConditionElm;
		public ParserRule getRule() { return rule; }

		//("IS NOT" | "IS" | "!=" | "==" | "<" | ">" | "<=" | ">=" | "!" | "||" | "&&" | "and" | "^" | "or")
		//condRight=ConditionElm
		public Group getGroup() { return cGroup; }

		//"IS NOT" | "IS" | "!=" | "==" | "<" | ">" | "<=" | ">=" | "!" | "||" | "&&" | "and" | "^" | "or"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"IS NOT"
		public Keyword getISNOTKeyword_0_0() { return cISNOTKeyword_0_0; }

		//"IS"
		public Keyword getISKeyword_0_1() { return cISKeyword_0_1; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_0_2() { return cExclamationMarkEqualsSignKeyword_0_2; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0_3() { return cEqualsSignEqualsSignKeyword_0_3; }

		//"<"
		public Keyword getLessThanSignKeyword_0_4() { return cLessThanSignKeyword_0_4; }

		//">"
		public Keyword getGreaterThanSignKeyword_0_5() { return cGreaterThanSignKeyword_0_5; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_0_6() { return cLessThanSignEqualsSignKeyword_0_6; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_0_7() { return cGreaterThanSignEqualsSignKeyword_0_7; }

		//"!"
		public Keyword getExclamationMarkKeyword_0_8() { return cExclamationMarkKeyword_0_8; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_0_9() { return cVerticalLineVerticalLineKeyword_0_9; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_0_10() { return cAmpersandAmpersandKeyword_0_10; }

		//"and"
		public Keyword getAndKeyword_0_11() { return cAndKeyword_0_11; }

		//"^"
		public Keyword getCircumflexAccentKeyword_0_12() { return cCircumflexAccentKeyword_0_12; }

		//"or"
		public Keyword getOrKeyword_0_13() { return cOrKeyword_0_13; }

		//condRight=ConditionElm
		public Assignment getCondRightAssignment_1() { return cCondRightAssignment_1; }

		//ConditionElm
		public RuleCall getCondRightConditionElmParserRuleCall_1_0() { return cCondRightConditionElmParserRuleCall_1_0; }
	}

	public class ConditionElmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionElm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOperandNAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOperandNINTTerminalRuleCall_0_0 = (RuleCall)cOperandNAssignment_0.eContents().get(0);
		private final Assignment cOperandStrAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOperandStrIDTerminalRuleCall_1_0 = (RuleCall)cOperandStrAssignment_1.eContents().get(0);
		
		//ConditionElm:
		//	operandN=INT | operandStr=ID;
		public ParserRule getRule() { return rule; }

		//operandN=INT | operandStr=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//operandN=INT
		public Assignment getOperandNAssignment_0() { return cOperandNAssignment_0; }

		//INT
		public RuleCall getOperandNINTTerminalRuleCall_0_0() { return cOperandNINTTerminalRuleCall_0_0; }

		//operandStr=ID
		public Assignment getOperandStrAssignment_1() { return cOperandStrAssignment_1; }

		//ID
		public RuleCall getOperandStrIDTerminalRuleCall_1_0() { return cOperandStrIDTerminalRuleCall_1_0; }
	}
	
	
	private SDEditModelElements pSDEditModel;
	private SDEditObjElements pSDEditObj;
	private SDEditObjnameElements pSDEditObjname;
	private SDEditCombinableDiagEltElements pSDEditCombinableDiagElt;
	private SDEditCallElements pSDEditCall;
	private SDEditCombinedFragmentElements pSDEditCombinedFragment;
	private SDEditAltElements pSDEditAlt;
	private SDEditLoopElements pSDEditLoop;
	private SDEditOptElements pSDEditOpt;
	private ConditionElements pCondition;
	private ConditionlistRightElements pConditionlistRight;
	private ConditionElmElements pConditionElm;
	private TerminalRule tSL_COMMENT;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SD_languageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("featureSeqDiag.sdedit.SD_language".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SDEditModel:
	//	elements+=SDEditObj* elements+=SDEditCombinableDiagElt*;
	public SDEditModelElements getSDEditModelAccess() {
		return (pSDEditModel != null) ? pSDEditModel : (pSDEditModel = new SDEditModelElements());
	}
	
	public ParserRule getSDEditModelRule() {
		return getSDEditModelAccess().getRule();
	}

	//SDEditObj:
	//	objName=SDEditObjname ":" type=ID ("[" ("a" | "p" | "r" | "x") "]")?;
	public SDEditObjElements getSDEditObjAccess() {
		return (pSDEditObj != null) ? pSDEditObj : (pSDEditObj = new SDEditObjElements());
	}
	
	public ParserRule getSDEditObjRule() {
		return getSDEditObjAccess().getRule();
	}

	//SDEditObjname:
	//	name=ID;
	public SDEditObjnameElements getSDEditObjnameAccess() {
		return (pSDEditObjname != null) ? pSDEditObjname : (pSDEditObjname = new SDEditObjnameElements());
	}
	
	public ParserRule getSDEditObjnameRule() {
		return getSDEditObjnameAccess().getRule();
	}

	//SDEditCombinableDiagElt:
	//	SDEditCall | SDEditCombinedFragment;
	public SDEditCombinableDiagEltElements getSDEditCombinableDiagEltAccess() {
		return (pSDEditCombinableDiagElt != null) ? pSDEditCombinableDiagElt : (pSDEditCombinableDiagElt = new SDEditCombinableDiagEltElements());
	}
	
	public ParserRule getSDEditCombinableDiagEltRule() {
		return getSDEditCombinableDiagEltAccess().getRule();
	}

	//SDEditCall:
	//	caller=[SDEditObjname] ":" (returnMessage=ID "=")? called=[SDEditObjname] "." name=ID "(" (params=ID (","
	//	paramLists+=ID)*)? ")";
	public SDEditCallElements getSDEditCallAccess() {
		return (pSDEditCall != null) ? pSDEditCall : (pSDEditCall = new SDEditCallElements());
	}
	
	public ParserRule getSDEditCallRule() {
		return getSDEditCallAccess().getRule();
	}

	//SDEditCombinedFragment:
	//	SDEditAlt | SDEditLoop | SDEditOpt;
	public SDEditCombinedFragmentElements getSDEditCombinedFragmentAccess() {
		return (pSDEditCombinedFragment != null) ? pSDEditCombinedFragment : (pSDEditCombinedFragment = new SDEditCombinedFragmentElements());
	}
	
	public ParserRule getSDEditCombinedFragmentRule() {
		return getSDEditCombinedFragmentAccess().getRule();
	}

	//SDEditAlt:
	//	"[c:alt" condAlt=Condition "]" conseq+=SDEditCombinableDiagElt+ ("--[else]" alters+=SDEditCombinableDiagElt*)+ "[/c]";
	public SDEditAltElements getSDEditAltAccess() {
		return (pSDEditAlt != null) ? pSDEditAlt : (pSDEditAlt = new SDEditAltElements());
	}
	
	public ParserRule getSDEditAltRule() {
		return getSDEditAltAccess().getRule();
	}

	//SDEditLoop:
	//	"[c:loop" condLoop=Condition "]" body+=SDEditCombinableDiagElt+ "[/c]";
	public SDEditLoopElements getSDEditLoopAccess() {
		return (pSDEditLoop != null) ? pSDEditLoop : (pSDEditLoop = new SDEditLoopElements());
	}
	
	public ParserRule getSDEditLoopRule() {
		return getSDEditLoopAccess().getRule();
	}

	//SDEditOpt:
	//	"[c:opt" condOpt=Condition "]" opts+=SDEditCombinableDiagElt+ "[/c]";
	public SDEditOptElements getSDEditOptAccess() {
		return (pSDEditOpt != null) ? pSDEditOpt : (pSDEditOpt = new SDEditOptElements());
	}
	
	public ParserRule getSDEditOptRule() {
		return getSDEditOptAccess().getRule();
	}

	//Condition:
	//	condLeft+=ConditionElm+ conlistRight+=ConditionlistRight*;
	public ConditionElements getConditionAccess() {
		return (pCondition != null) ? pCondition : (pCondition = new ConditionElements());
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//ConditionlistRight:
	//	("IS NOT" | "IS" | "!=" | "==" | "<" | ">" | "<=" | ">=" | "!" | "||" | "&&" | "and" | "^" | "or")
	//	condRight=ConditionElm;
	public ConditionlistRightElements getConditionlistRightAccess() {
		return (pConditionlistRight != null) ? pConditionlistRight : (pConditionlistRight = new ConditionlistRightElements());
	}
	
	public ParserRule getConditionlistRightRule() {
		return getConditionlistRightAccess().getRule();
	}

	//ConditionElm:
	//	operandN=INT | operandStr=ID;
	public ConditionElmElements getConditionElmAccess() {
		return (pConditionElm != null) ? pConditionElm : (pConditionElm = new ConditionElmElements());
	}
	
	public ParserRule getConditionElmRule() {
		return getConditionElmAccess().getRule();
	}

	//terminal SL_COMMENT:
	//	"#" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
