/*
* generated by Xtext
*/
package sdedit.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SDELangGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SDEditModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SDEditModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsSDEditObjParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsSDEditCombinableDiagEltParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//SDEditModel:
		//	elements+=SDEditObj+ elements+=SDEditCombinableDiagElt*;
		public ParserRule getRule() { return rule; }

		//elements+=SDEditObj+ elements+=SDEditCombinableDiagElt*
		public Group getGroup() { return cGroup; }

		//elements+=SDEditObj+
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }

		//SDEditObj
		public RuleCall getElementsSDEditObjParserRuleCall_0_0() { return cElementsSDEditObjParserRuleCall_0_0; }

		//elements+=SDEditCombinableDiagElt*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//SDEditCombinableDiagElt
		public RuleCall getElementsSDEditCombinableDiagEltParserRuleCall_1_0() { return cElementsSDEditCombinableDiagEltParserRuleCall_1_0; }
	}

	public class SDEditObjElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SDEditObj");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeIDTerminalRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Keyword cAKeyword_3_1_0 = (Keyword)cAlternatives_3_1.eContents().get(0);
		private final Keyword cPKeyword_3_1_1 = (Keyword)cAlternatives_3_1.eContents().get(1);
		private final Keyword cRKeyword_3_1_2 = (Keyword)cAlternatives_3_1.eContents().get(2);
		private final Keyword cXKeyword_3_1_3 = (Keyword)cAlternatives_3_1.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//SDEditObj:
		//	name=ID ":" type=ID ("[" ("a" | "p" | "r" | "x") "]")?;
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=ID ("[" ("a" | "p" | "r" | "x") "]")?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=ID
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_2_0() { return cTypeIDTerminalRuleCall_2_0; }

		//("[" ("a" | "p" | "r" | "x") "]")?
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//"a" | "p" | "r" | "x"
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//"a"
		public Keyword getAKeyword_3_1_0() { return cAKeyword_3_1_0; }

		//"p"
		public Keyword getPKeyword_3_1_1() { return cPKeyword_3_1_1; }

		//"r"
		public Keyword getRKeyword_3_1_2() { return cRKeyword_3_1_2; }

		//"x"
		public Keyword getXKeyword_3_1_3() { return cXKeyword_3_1_3; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
	}

	public class SDEditCombinableDiagEltElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SDEditCombinableDiagElt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSDEditCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSDEditCombinedFragmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SDEditCombinableDiagElt:
		//	SDEditCall | SDEditCombinedFragment;
		public ParserRule getRule() { return rule; }

		//SDEditCall | SDEditCombinedFragment
		public Alternatives getAlternatives() { return cAlternatives; }

		//SDEditCall
		public RuleCall getSDEditCallParserRuleCall_0() { return cSDEditCallParserRuleCall_0; }

		//SDEditCombinedFragment
		public RuleCall getSDEditCombinedFragmentParserRuleCall_1() { return cSDEditCombinedFragmentParserRuleCall_1; }
	}

	public class SDEditCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SDEditCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCallerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCallerIDTerminalRuleCall_0_0 = (RuleCall)cCallerAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cReturnMessageAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cReturnMessageIDTerminalRuleCall_2_0_0 = (RuleCall)cReturnMessageAssignment_2_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cCalledAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCalledIDTerminalRuleCall_3_0 = (RuleCall)cCalledAssignment_3.eContents().get(0);
		private final Keyword cFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cParamsAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cParamsIDTerminalRuleCall_7_0_0 = (RuleCall)cParamsAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cParamsAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cParamsIDTerminalRuleCall_7_1_1_0 = (RuleCall)cParamsAssignment_7_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//SDEditCall:
		//	caller=ID ":" (returnMessage=ID "=")? called=ID "." name=ID "(" (params+=ID ("," params+=ID)*)? ")";
		public ParserRule getRule() { return rule; }

		//caller=ID ":" (returnMessage=ID "=")? called=ID "." name=ID "(" (params+=ID ("," params+=ID)*)? ")"
		public Group getGroup() { return cGroup; }

		//caller=ID
		public Assignment getCallerAssignment_0() { return cCallerAssignment_0; }

		//ID
		public RuleCall getCallerIDTerminalRuleCall_0_0() { return cCallerIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//(returnMessage=ID "=")?
		public Group getGroup_2() { return cGroup_2; }

		//returnMessage=ID
		public Assignment getReturnMessageAssignment_2_0() { return cReturnMessageAssignment_2_0; }

		//ID
		public RuleCall getReturnMessageIDTerminalRuleCall_2_0_0() { return cReturnMessageIDTerminalRuleCall_2_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }

		//called=ID
		public Assignment getCalledAssignment_3() { return cCalledAssignment_3; }

		//ID
		public RuleCall getCalledIDTerminalRuleCall_3_0() { return cCalledIDTerminalRuleCall_3_0; }

		//"."
		public Keyword getFullStopKeyword_4() { return cFullStopKeyword_4; }

		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }

		//(params+=ID ("," params+=ID)*)?
		public Group getGroup_7() { return cGroup_7; }

		//params+=ID
		public Assignment getParamsAssignment_7_0() { return cParamsAssignment_7_0; }

		//ID
		public RuleCall getParamsIDTerminalRuleCall_7_0_0() { return cParamsIDTerminalRuleCall_7_0_0; }

		//("," params+=ID)*
		public Group getGroup_7_1() { return cGroup_7_1; }

		//","
		public Keyword getCommaKeyword_7_1_0() { return cCommaKeyword_7_1_0; }

		//params+=ID
		public Assignment getParamsAssignment_7_1_1() { return cParamsAssignment_7_1_1; }

		//ID
		public RuleCall getParamsIDTerminalRuleCall_7_1_1_0() { return cParamsIDTerminalRuleCall_7_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}

	public class SDEditCombinedFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SDEditCombinedFragment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSDEditAltParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSDEditLoopParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSDEditOptParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SDEditCombinedFragment:
		//	SDEditAlt | SDEditLoop | SDEditOpt;
		public ParserRule getRule() { return rule; }

		//SDEditAlt | SDEditLoop | SDEditOpt
		public Alternatives getAlternatives() { return cAlternatives; }

		//SDEditAlt
		public RuleCall getSDEditAltParserRuleCall_0() { return cSDEditAltParserRuleCall_0; }

		//SDEditLoop
		public RuleCall getSDEditLoopParserRuleCall_1() { return cSDEditLoopParserRuleCall_1; }

		//SDEditOpt
		public RuleCall getSDEditOptParserRuleCall_2() { return cSDEditOptParserRuleCall_2; }
	}

	public class SDEditAltElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SDEditAlt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCAltKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondCommentIDTerminalRuleCall_1_0 = (RuleCall)cCondCommentAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConseqAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConseqSDEditCombinableDiagEltParserRuleCall_3_0 = (RuleCall)cConseqAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAltersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAltersSDEditCombinableDiagEltParserRuleCall_4_1_0 = (RuleCall)cAltersAssignment_4_1.eContents().get(0);
		private final Keyword cCKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SDEditAlt:
		//	"[c:alt" condComment+=ID+ "]" conseq+=SDEditCombinableDiagElt+ ("--[else]" alters+=SDEditCombinableDiagElt+)+ "[/c]";
		public ParserRule getRule() { return rule; }

		//"[c:alt" condComment+=ID+ "]" conseq+=SDEditCombinableDiagElt+ ("--[else]" alters+=SDEditCombinableDiagElt+)+ "[/c]"
		public Group getGroup() { return cGroup; }

		//"[c:alt"
		public Keyword getCAltKeyword_0() { return cCAltKeyword_0; }

		//condComment+=ID+
		public Assignment getCondCommentAssignment_1() { return cCondCommentAssignment_1; }

		//ID
		public RuleCall getCondCommentIDTerminalRuleCall_1_0() { return cCondCommentIDTerminalRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }

		//conseq+=SDEditCombinableDiagElt+
		public Assignment getConseqAssignment_3() { return cConseqAssignment_3; }

		//SDEditCombinableDiagElt
		public RuleCall getConseqSDEditCombinableDiagEltParserRuleCall_3_0() { return cConseqSDEditCombinableDiagEltParserRuleCall_3_0; }

		//("--[else]" alters+=SDEditCombinableDiagElt+)+
		public Group getGroup_4() { return cGroup_4; }

		//"--[else]"
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }

		//alters+=SDEditCombinableDiagElt+
		public Assignment getAltersAssignment_4_1() { return cAltersAssignment_4_1; }

		//SDEditCombinableDiagElt
		public RuleCall getAltersSDEditCombinableDiagEltParserRuleCall_4_1_0() { return cAltersSDEditCombinableDiagEltParserRuleCall_4_1_0; }

		//"[/c]"
		public Keyword getCKeyword_5() { return cCKeyword_5; }
	}

	public class SDEditLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SDEditLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondCommentIDTerminalRuleCall_1_0 = (RuleCall)cCondCommentAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodySDEditCombinableDiagEltParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cCKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SDEditLoop:
		//	"[c:loop" condComment+=ID+ "]" body+=SDEditCombinableDiagElt+ "[/c]";
		public ParserRule getRule() { return rule; }

		//"[c:loop" condComment+=ID+ "]" body+=SDEditCombinableDiagElt+ "[/c]"
		public Group getGroup() { return cGroup; }

		//"[c:loop"
		public Keyword getCLoopKeyword_0() { return cCLoopKeyword_0; }

		//condComment+=ID+
		public Assignment getCondCommentAssignment_1() { return cCondCommentAssignment_1; }

		//ID
		public RuleCall getCondCommentIDTerminalRuleCall_1_0() { return cCondCommentIDTerminalRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }

		//body+=SDEditCombinableDiagElt+
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//SDEditCombinableDiagElt
		public RuleCall getBodySDEditCombinableDiagEltParserRuleCall_3_0() { return cBodySDEditCombinableDiagEltParserRuleCall_3_0; }

		//"[/c]"
		public Keyword getCKeyword_4() { return cCKeyword_4; }
	}

	public class SDEditOptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SDEditOpt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCOptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondCommentIDTerminalRuleCall_1_0 = (RuleCall)cCondCommentAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOptsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOptsSDEditCombinableDiagEltParserRuleCall_3_0 = (RuleCall)cOptsAssignment_3.eContents().get(0);
		private final Keyword cCKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SDEditOpt:
		//	"[c:opt" condComment+=ID+ "]" opts+=SDEditCombinableDiagElt+ "[/c]";
		public ParserRule getRule() { return rule; }

		//"[c:opt" condComment+=ID+ "]" opts+=SDEditCombinableDiagElt+ "[/c]"
		public Group getGroup() { return cGroup; }

		//"[c:opt"
		public Keyword getCOptKeyword_0() { return cCOptKeyword_0; }

		//condComment+=ID+
		public Assignment getCondCommentAssignment_1() { return cCondCommentAssignment_1; }

		//ID
		public RuleCall getCondCommentIDTerminalRuleCall_1_0() { return cCondCommentIDTerminalRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }

		//opts+=SDEditCombinableDiagElt+
		public Assignment getOptsAssignment_3() { return cOptsAssignment_3; }

		//SDEditCombinableDiagElt
		public RuleCall getOptsSDEditCombinableDiagEltParserRuleCall_3_0() { return cOptsSDEditCombinableDiagEltParserRuleCall_3_0; }

		//"[/c]"
		public Keyword getCKeyword_4() { return cCKeyword_4; }
	}
	
	
	private SDEditModelElements pSDEditModel;
	private SDEditObjElements pSDEditObj;
	private SDEditCombinableDiagEltElements pSDEditCombinableDiagElt;
	private SDEditCallElements pSDEditCall;
	private SDEditCombinedFragmentElements pSDEditCombinedFragment;
	private SDEditAltElements pSDEditAlt;
	private SDEditLoopElements pSDEditLoop;
	private SDEditOptElements pSDEditOpt;
	private TerminalRule tSL_COMMENT;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SDELangGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("sdedit.SDELang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SDEditModel:
	//	elements+=SDEditObj+ elements+=SDEditCombinableDiagElt*;
	public SDEditModelElements getSDEditModelAccess() {
		return (pSDEditModel != null) ? pSDEditModel : (pSDEditModel = new SDEditModelElements());
	}
	
	public ParserRule getSDEditModelRule() {
		return getSDEditModelAccess().getRule();
	}

	//SDEditObj:
	//	name=ID ":" type=ID ("[" ("a" | "p" | "r" | "x") "]")?;
	public SDEditObjElements getSDEditObjAccess() {
		return (pSDEditObj != null) ? pSDEditObj : (pSDEditObj = new SDEditObjElements());
	}
	
	public ParserRule getSDEditObjRule() {
		return getSDEditObjAccess().getRule();
	}

	//SDEditCombinableDiagElt:
	//	SDEditCall | SDEditCombinedFragment;
	public SDEditCombinableDiagEltElements getSDEditCombinableDiagEltAccess() {
		return (pSDEditCombinableDiagElt != null) ? pSDEditCombinableDiagElt : (pSDEditCombinableDiagElt = new SDEditCombinableDiagEltElements());
	}
	
	public ParserRule getSDEditCombinableDiagEltRule() {
		return getSDEditCombinableDiagEltAccess().getRule();
	}

	//SDEditCall:
	//	caller=ID ":" (returnMessage=ID "=")? called=ID "." name=ID "(" (params+=ID ("," params+=ID)*)? ")";
	public SDEditCallElements getSDEditCallAccess() {
		return (pSDEditCall != null) ? pSDEditCall : (pSDEditCall = new SDEditCallElements());
	}
	
	public ParserRule getSDEditCallRule() {
		return getSDEditCallAccess().getRule();
	}

	//SDEditCombinedFragment:
	//	SDEditAlt | SDEditLoop | SDEditOpt;
	public SDEditCombinedFragmentElements getSDEditCombinedFragmentAccess() {
		return (pSDEditCombinedFragment != null) ? pSDEditCombinedFragment : (pSDEditCombinedFragment = new SDEditCombinedFragmentElements());
	}
	
	public ParserRule getSDEditCombinedFragmentRule() {
		return getSDEditCombinedFragmentAccess().getRule();
	}

	//SDEditAlt:
	//	"[c:alt" condComment+=ID+ "]" conseq+=SDEditCombinableDiagElt+ ("--[else]" alters+=SDEditCombinableDiagElt+)+ "[/c]";
	public SDEditAltElements getSDEditAltAccess() {
		return (pSDEditAlt != null) ? pSDEditAlt : (pSDEditAlt = new SDEditAltElements());
	}
	
	public ParserRule getSDEditAltRule() {
		return getSDEditAltAccess().getRule();
	}

	//SDEditLoop:
	//	"[c:loop" condComment+=ID+ "]" body+=SDEditCombinableDiagElt+ "[/c]";
	public SDEditLoopElements getSDEditLoopAccess() {
		return (pSDEditLoop != null) ? pSDEditLoop : (pSDEditLoop = new SDEditLoopElements());
	}
	
	public ParserRule getSDEditLoopRule() {
		return getSDEditLoopAccess().getRule();
	}

	//SDEditOpt:
	//	"[c:opt" condComment+=ID+ "]" opts+=SDEditCombinableDiagElt+ "[/c]";
	public SDEditOptElements getSDEditOptAccess() {
		return (pSDEditOpt != null) ? pSDEditOpt : (pSDEditOpt = new SDEditOptElements());
	}
	
	public ParserRule getSDEditOptRule() {
		return getSDEditOptAccess().getRule();
	}

	//terminal SL_COMMENT:
	//	"#" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
