/*
* generated by Xtext
*/
grammar InternalSDELang;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package sdedit.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package sdedit.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import sdedit.services.SDELangGrammarAccess;

}

@parser::members {

 	private SDELangGrammarAccess grammarAccess;
 	
    public InternalSDELangParser(TokenStream input, SDELangGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "SDEditModel";	
   	}
   	
   	@Override
   	protected SDELangGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSDEditModel
entryRuleSDEditModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSDEditModelRule()); }
	 iv_ruleSDEditModel=ruleSDEditModel 
	 { $current=$iv_ruleSDEditModel.current; } 
	 EOF 
;

// Rule SDEditModel
ruleSDEditModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSDEditModelAccess().getElementsSDEditObjParserRuleCall_0_0()); 
	    }
		lv_elements_0_0=ruleSDEditObj		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSDEditModelRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"SDEditObj");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getSDEditModelAccess().getElementsSDEditCombinableDiagEltParserRuleCall_1_0()); 
	    }
		lv_elements_1_0=ruleSDEditCombinableDiagElt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSDEditModelRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_1_0, 
        		"SDEditCombinableDiagElt");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleSDEditObj
entryRuleSDEditObj returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSDEditObjRule()); }
	 iv_ruleSDEditObj=ruleSDEditObj 
	 { $current=$iv_ruleSDEditObj.current; } 
	 EOF 
;

// Rule SDEditObj
ruleSDEditObj returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getSDEditObjAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSDEditObjRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSDEditObjAccess().getColonKeyword_1());
    }
(
(
		lv_type_2_0=RULE_ID
		{
			newLeafNode(lv_type_2_0, grammarAccess.getSDEditObjAccess().getTypeIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSDEditObjRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"ID");
	    }

)
)(	otherlv_3='[' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSDEditObjAccess().getLeftSquareBracketKeyword_3_0());
    }
(	otherlv_4='a' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSDEditObjAccess().getAKeyword_3_1_0());
    }

    |	otherlv_5='p' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSDEditObjAccess().getPKeyword_3_1_1());
    }

    |	otherlv_6='r' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSDEditObjAccess().getRKeyword_3_1_2());
    }

    |	otherlv_7='x' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSDEditObjAccess().getXKeyword_3_1_3());
    }
)	otherlv_8=']' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSDEditObjAccess().getRightSquareBracketKeyword_3_2());
    }
)?)
;





// Entry rule entryRuleSDEditCombinableDiagElt
entryRuleSDEditCombinableDiagElt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSDEditCombinableDiagEltRule()); }
	 iv_ruleSDEditCombinableDiagElt=ruleSDEditCombinableDiagElt 
	 { $current=$iv_ruleSDEditCombinableDiagElt.current; } 
	 EOF 
;

// Rule SDEditCombinableDiagElt
ruleSDEditCombinableDiagElt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSDEditCombinableDiagEltAccess().getSDEditCallParserRuleCall_0()); 
    }
    this_SDEditCall_0=ruleSDEditCall
    { 
        $current = $this_SDEditCall_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSDEditCombinableDiagEltAccess().getSDEditCombinedFragmentParserRuleCall_1()); 
    }
    this_SDEditCombinedFragment_1=ruleSDEditCombinedFragment
    { 
        $current = $this_SDEditCombinedFragment_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSDEditCall
entryRuleSDEditCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSDEditCallRule()); }
	 iv_ruleSDEditCall=ruleSDEditCall 
	 { $current=$iv_ruleSDEditCall.current; } 
	 EOF 
;

// Rule SDEditCall
ruleSDEditCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_caller_0_0=RULE_ID
		{
			newLeafNode(lv_caller_0_0, grammarAccess.getSDEditCallAccess().getCallerIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSDEditCallRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"caller",
        		lv_caller_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSDEditCallAccess().getColonKeyword_1());
    }
((
(
		lv_returnMessage_2_0=RULE_ID
		{
			newLeafNode(lv_returnMessage_2_0, grammarAccess.getSDEditCallAccess().getReturnMessageIDTerminalRuleCall_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSDEditCallRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"returnMessage",
        		lv_returnMessage_2_0, 
        		"ID");
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSDEditCallAccess().getEqualsSignKeyword_2_1());
    }
)?(
(
		lv_called_4_0=RULE_ID
		{
			newLeafNode(lv_called_4_0, grammarAccess.getSDEditCallAccess().getCalledIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSDEditCallRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"called",
        		lv_called_4_0, 
        		"ID");
	    }

)
)	otherlv_5='.' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSDEditCallAccess().getFullStopKeyword_4());
    }
(
(
		lv_name_6_0=RULE_ID
		{
			newLeafNode(lv_name_6_0, grammarAccess.getSDEditCallAccess().getNameIDTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSDEditCallRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_6_0, 
        		"ID");
	    }

)
)	otherlv_7='(' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSDEditCallAccess().getLeftParenthesisKeyword_6());
    }
((
(
		lv_params_8_0=RULE_ID
		{
			newLeafNode(lv_params_8_0, grammarAccess.getSDEditCallAccess().getParamsIDTerminalRuleCall_7_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSDEditCallRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"params",
        		lv_params_8_0, 
        		"ID");
	    }

)
)(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSDEditCallAccess().getCommaKeyword_7_1_0());
    }
(
(
		lv_params_10_0=RULE_ID
		{
			newLeafNode(lv_params_10_0, grammarAccess.getSDEditCallAccess().getParamsIDTerminalRuleCall_7_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSDEditCallRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"params",
        		lv_params_10_0, 
        		"ID");
	    }

)
))*)?	otherlv_11=')' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getSDEditCallAccess().getRightParenthesisKeyword_8());
    }
)
;





// Entry rule entryRuleSDEditCombinedFragment
entryRuleSDEditCombinedFragment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSDEditCombinedFragmentRule()); }
	 iv_ruleSDEditCombinedFragment=ruleSDEditCombinedFragment 
	 { $current=$iv_ruleSDEditCombinedFragment.current; } 
	 EOF 
;

// Rule SDEditCombinedFragment
ruleSDEditCombinedFragment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSDEditCombinedFragmentAccess().getSDEditAltParserRuleCall_0()); 
    }
    this_SDEditAlt_0=ruleSDEditAlt
    { 
        $current = $this_SDEditAlt_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSDEditCombinedFragmentAccess().getSDEditLoopParserRuleCall_1()); 
    }
    this_SDEditLoop_1=ruleSDEditLoop
    { 
        $current = $this_SDEditLoop_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSDEditCombinedFragmentAccess().getSDEditOptParserRuleCall_2()); 
    }
    this_SDEditOpt_2=ruleSDEditOpt
    { 
        $current = $this_SDEditOpt_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSDEditAlt
entryRuleSDEditAlt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSDEditAltRule()); }
	 iv_ruleSDEditAlt=ruleSDEditAlt 
	 { $current=$iv_ruleSDEditAlt.current; } 
	 EOF 
;

// Rule SDEditAlt
ruleSDEditAlt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[c:alt' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSDEditAltAccess().getCAltKeyword_0());
    }
(
(
		lv_condComment_1_0=RULE_ID
		{
			newLeafNode(lv_condComment_1_0, grammarAccess.getSDEditAltAccess().getCondCommentIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSDEditAltRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"condComment",
        		lv_condComment_1_0, 
        		"ID");
	    }

)
)+	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSDEditAltAccess().getRightSquareBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSDEditAltAccess().getConseqSDEditCombinableDiagEltParserRuleCall_3_0()); 
	    }
		lv_conseq_3_0=ruleSDEditCombinableDiagElt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSDEditAltRule());
	        }
       		add(
       			$current, 
       			"conseq",
        		lv_conseq_3_0, 
        		"SDEditCombinableDiagElt");
	        afterParserOrEnumRuleCall();
	    }

)
)+(	otherlv_4='--[else]' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSDEditAltAccess().getElseKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSDEditAltAccess().getAltersSDEditCombinableDiagEltParserRuleCall_4_1_0()); 
	    }
		lv_alters_5_0=ruleSDEditCombinableDiagElt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSDEditAltRule());
	        }
       		add(
       			$current, 
       			"alters",
        		lv_alters_5_0, 
        		"SDEditCombinableDiagElt");
	        afterParserOrEnumRuleCall();
	    }

)
)+)+	otherlv_6='[/c]' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSDEditAltAccess().getCKeyword_5());
    }
)
;





// Entry rule entryRuleSDEditLoop
entryRuleSDEditLoop returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSDEditLoopRule()); }
	 iv_ruleSDEditLoop=ruleSDEditLoop 
	 { $current=$iv_ruleSDEditLoop.current; } 
	 EOF 
;

// Rule SDEditLoop
ruleSDEditLoop returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[c:loop' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSDEditLoopAccess().getCLoopKeyword_0());
    }
(
(
		lv_condComment_1_0=RULE_ID
		{
			newLeafNode(lv_condComment_1_0, grammarAccess.getSDEditLoopAccess().getCondCommentIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSDEditLoopRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"condComment",
        		lv_condComment_1_0, 
        		"ID");
	    }

)
)+	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSDEditLoopAccess().getRightSquareBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSDEditLoopAccess().getBodySDEditCombinableDiagEltParserRuleCall_3_0()); 
	    }
		lv_body_3_0=ruleSDEditCombinableDiagElt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSDEditLoopRule());
	        }
       		add(
       			$current, 
       			"body",
        		lv_body_3_0, 
        		"SDEditCombinableDiagElt");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_4='[/c]' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSDEditLoopAccess().getCKeyword_4());
    }
)
;





// Entry rule entryRuleSDEditOpt
entryRuleSDEditOpt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSDEditOptRule()); }
	 iv_ruleSDEditOpt=ruleSDEditOpt 
	 { $current=$iv_ruleSDEditOpt.current; } 
	 EOF 
;

// Rule SDEditOpt
ruleSDEditOpt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[c:opt' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSDEditOptAccess().getCOptKeyword_0());
    }
(
(
		lv_condComment_1_0=RULE_ID
		{
			newLeafNode(lv_condComment_1_0, grammarAccess.getSDEditOptAccess().getCondCommentIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSDEditOptRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"condComment",
        		lv_condComment_1_0, 
        		"ID");
	    }

)
)+	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSDEditOptAccess().getRightSquareBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSDEditOptAccess().getOptsSDEditCombinableDiagEltParserRuleCall_3_0()); 
	    }
		lv_opts_3_0=ruleSDEditCombinableDiagElt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSDEditOptRule());
	        }
       		add(
       			$current, 
       			"opts",
        		lv_opts_3_0, 
        		"SDEditCombinableDiagElt");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_4='[/c]' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSDEditOptAccess().getCKeyword_4());
    }
)
;





RULE_SL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


