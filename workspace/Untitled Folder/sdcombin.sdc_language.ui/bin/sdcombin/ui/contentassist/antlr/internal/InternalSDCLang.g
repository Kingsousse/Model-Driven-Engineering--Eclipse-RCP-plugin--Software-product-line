/*
* generated by Xtext
*/
grammar InternalSDCLang;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package sdcombin.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package sdcombin.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import sdcombin.services.SDCLangGrammarAccess;

}

@parser::members {
 
 	private SDCLangGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(SDCLangGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleSequenceProg
entryRuleSequenceProg 
:
{ before(grammarAccess.getSequenceProgRule()); }
	 ruleSequenceProg
{ after(grammarAccess.getSequenceProgRule()); } 
	 EOF 
;

// Rule SequenceProg
ruleSequenceProg
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSequenceProgAccess().getGroup()); }
(rule__SequenceProg__Group__0)
{ after(grammarAccess.getSequenceProgAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFeature
entryRuleFeature 
:
{ before(grammarAccess.getFeatureRule()); }
	 ruleFeature
{ after(grammarAccess.getFeatureRule()); } 
	 EOF 
;

// Rule Feature
ruleFeature
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFeatureAccess().getNameAssignment()); }
(rule__Feature__NameAssignment)
{ after(grammarAccess.getFeatureAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleContexte
entryRuleContexte 
:
{ before(grammarAccess.getContexteRule()); }
	 ruleContexte
{ after(grammarAccess.getContexteRule()); } 
	 EOF 
;

// Rule Contexte
ruleContexte
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getContexteAccess().getAlternatives()); }
(rule__Contexte__Alternatives)
{ after(grammarAccess.getContexteAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCondition
entryRuleCondition 
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionAccess().getConditionAssignment()); }
(rule__Condition__ConditionAssignment)
{ after(grammarAccess.getConditionAccess().getConditionAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLoop
entryRuleLoop 
:
{ before(grammarAccess.getLoopRule()); }
	 ruleLoop
{ after(grammarAccess.getLoopRule()); } 
	 EOF 
;

// Rule Loop
ruleLoop
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLoopAccess().getGroup()); }
(rule__Loop__Group__0)
{ after(grammarAccess.getLoopAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSequence
entryRuleSequence 
:
{ before(grammarAccess.getSequenceRule()); }
	 ruleSequence
{ after(grammarAccess.getSequenceRule()); } 
	 EOF 
;

// Rule Sequence
ruleSequence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getSequenceAccess().getGroup()); }
(rule__Sequence__Group__0)
{ after(grammarAccess.getSequenceAccess().getGroup()); }
)
(
{ before(grammarAccess.getSequenceAccess().getGroup()); }
(rule__Sequence__Group__0)*
{ after(grammarAccess.getSequenceAccess().getGroup()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAlternative
entryRuleAlternative 
:
{ before(grammarAccess.getAlternativeRule()); }
	 ruleAlternative
{ after(grammarAccess.getAlternativeRule()); } 
	 EOF 
;

// Rule Alternative
ruleAlternative
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAlternativeAccess().getGroup()); }
(rule__Alternative__Group__0)
{ after(grammarAccess.getAlternativeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOption
entryRuleOption 
:
{ before(grammarAccess.getOptionRule()); }
	 ruleOption
{ after(grammarAccess.getOptionRule()); } 
	 EOF 
;

// Rule Option
ruleOption
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOptionAccess().getGroup()); }
(rule__Option__Group__0)
{ after(grammarAccess.getOptionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Contexte__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContexteAccess().getGroup_0()); }
(rule__Contexte__Group_0__0)
{ after(grammarAccess.getContexteAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getContexteAccess().getAlternativeAssignment_1()); }
(rule__Contexte__AlternativeAssignment_1)
{ after(grammarAccess.getContexteAccess().getAlternativeAssignment_1()); }
)

    |(
{ before(grammarAccess.getContexteAccess().getLoopAssignment_2()); }
(rule__Contexte__LoopAssignment_2)
{ after(grammarAccess.getContexteAccess().getLoopAssignment_2()); }
)

    |(
{ before(grammarAccess.getContexteAccess().getOptionAssignment_3()); }
(rule__Contexte__OptionAssignment_3)
{ after(grammarAccess.getContexteAccess().getOptionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__SequenceProg__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceProg__Group__0__Impl
	rule__SequenceProg__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceProg__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceProgAccess().getGroup_0()); }
(rule__SequenceProg__Group_0__0)
{ after(grammarAccess.getSequenceProgAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequenceProg__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceProg__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceProg__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceProgAccess().getGroup_1()); }
(rule__SequenceProg__Group_1__0)
{ after(grammarAccess.getSequenceProgAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SequenceProg__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceProg__Group_0__0__Impl
	rule__SequenceProg__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceProg__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceProgAccess().getFeaturesKeyword_0_0()); }

	'Features {' 

{ after(grammarAccess.getSequenceProgAccess().getFeaturesKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequenceProg__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceProg__Group_0__1__Impl
	rule__SequenceProg__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceProg__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getSequenceProgAccess().getFeaturesAssignment_0_1()); }
(rule__SequenceProg__FeaturesAssignment_0_1)
{ after(grammarAccess.getSequenceProgAccess().getFeaturesAssignment_0_1()); }
)
(
{ before(grammarAccess.getSequenceProgAccess().getFeaturesAssignment_0_1()); }
(rule__SequenceProg__FeaturesAssignment_0_1)*
{ after(grammarAccess.getSequenceProgAccess().getFeaturesAssignment_0_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequenceProg__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceProg__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceProg__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceProgAccess().getRightCurlyBracketKeyword_0_2()); }

	'}' 

{ after(grammarAccess.getSequenceProgAccess().getRightCurlyBracketKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SequenceProg__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceProg__Group_1__0__Impl
	rule__SequenceProg__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceProg__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceProgAccess().getCombinationKeyword_1_0()); }

	'Combination {' 

{ after(grammarAccess.getSequenceProgAccess().getCombinationKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequenceProg__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceProg__Group_1__1__Impl
	rule__SequenceProg__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceProg__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getSequenceProgAccess().getContexteAssignment_1_1()); }
(rule__SequenceProg__ContexteAssignment_1_1)
{ after(grammarAccess.getSequenceProgAccess().getContexteAssignment_1_1()); }
)
(
{ before(grammarAccess.getSequenceProgAccess().getContexteAssignment_1_1()); }
(rule__SequenceProg__ContexteAssignment_1_1)*
{ after(grammarAccess.getSequenceProgAccess().getContexteAssignment_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequenceProg__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceProg__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceProg__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceProgAccess().getRightCurlyBracketKeyword_1_2()); }

	'}' 

{ after(grammarAccess.getSequenceProgAccess().getRightCurlyBracketKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Contexte__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Contexte__Group_0__0__Impl
	rule__Contexte__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Contexte__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContexteAccess().getObjofAssignment_0_0()); }
(rule__Contexte__ObjofAssignment_0_0)
{ after(grammarAccess.getContexteAccess().getObjofAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Contexte__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Contexte__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Contexte__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContexteAccess().getSequenceAssignment_0_1()); }
(rule__Contexte__SequenceAssignment_0_1)?
{ after(grammarAccess.getContexteAccess().getSequenceAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Loop__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Loop__Group__0__Impl
	rule__Loop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getLoopKeyword_0()); }

	'loop [' 

{ after(grammarAccess.getLoopAccess().getLoopKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Loop__Group__1__Impl
	rule__Loop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getConditionAssignment_1()); }
(rule__Loop__ConditionAssignment_1)
{ after(grammarAccess.getLoopAccess().getConditionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Loop__Group__2__Impl
	rule__Loop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getRightSquareBracketSpaceLeftCurlyBracketKeyword_2()); }

	'] {' 

{ after(grammarAccess.getLoopAccess().getRightSquareBracketSpaceLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Loop__Group__3__Impl
	rule__Loop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getLoopAccess().getContexteAssignment_3()); }
(rule__Loop__ContexteAssignment_3)
{ after(grammarAccess.getLoopAccess().getContexteAssignment_3()); }
)
(
{ before(grammarAccess.getLoopAccess().getContexteAssignment_3()); }
(rule__Loop__ContexteAssignment_3)*
{ after(grammarAccess.getLoopAccess().getContexteAssignment_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Loop__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getLoopAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Sequence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sequence__Group__0__Impl
	rule__Sequence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getSeqKeyword_0()); }

	'seq' 

{ after(grammarAccess.getSequenceAccess().getSeqKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sequence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sequence__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getObjofRAssignment_1()); }
(rule__Sequence__ObjofRAssignment_1)
{ after(grammarAccess.getSequenceAccess().getObjofRAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Alternative__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternative__Group__0__Impl
	rule__Alternative__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getAltKeyword_0()); }

	'alt [' 

{ after(grammarAccess.getAlternativeAccess().getAltKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternative__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternative__Group__1__Impl
	rule__Alternative__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getConditionAltAssignment_1()); }
(rule__Alternative__ConditionAltAssignment_1)
{ after(grammarAccess.getAlternativeAccess().getConditionAltAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternative__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternative__Group__2__Impl
	rule__Alternative__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getRightSquareBracketSpaceLeftCurlyBracketKeyword_2()); }

	'] {' 

{ after(grammarAccess.getAlternativeAccess().getRightSquareBracketSpaceLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternative__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternative__Group__3__Impl
	rule__Alternative__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getContexteIFAssignment_3()); }
(rule__Alternative__ContexteIFAssignment_3)*
{ after(grammarAccess.getAlternativeAccess().getContexteIFAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternative__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternative__Group__4__Impl
	rule__Alternative__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getElseKeyword_4()); }

	'else' 

{ after(grammarAccess.getAlternativeAccess().getElseKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternative__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternative__Group__5__Impl
	rule__Alternative__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getContexteELSEAssignment_5()); }
(rule__Alternative__ContexteELSEAssignment_5)*
{ after(grammarAccess.getAlternativeAccess().getContexteELSEAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternative__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternative__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getAlternativeAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Option__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Option__Group__0__Impl
	rule__Option__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Option__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionAccess().getOptKeyword_0()); }

	'opt [' 

{ after(grammarAccess.getOptionAccess().getOptKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Option__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Option__Group__1__Impl
	rule__Option__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Option__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionAccess().getConditionOptAssignment_1()); }
(rule__Option__ConditionOptAssignment_1)
{ after(grammarAccess.getOptionAccess().getConditionOptAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Option__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Option__Group__2__Impl
	rule__Option__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Option__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionAccess().getRightSquareBracketSpaceLeftCurlyBracketKeyword_2()); }

	'] {' 

{ after(grammarAccess.getOptionAccess().getRightSquareBracketSpaceLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Option__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Option__Group__3__Impl
	rule__Option__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Option__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getOptionAccess().getContexteAssignment_3()); }
(rule__Option__ContexteAssignment_3)
{ after(grammarAccess.getOptionAccess().getContexteAssignment_3()); }
)
(
{ before(grammarAccess.getOptionAccess().getContexteAssignment_3()); }
(rule__Option__ContexteAssignment_3)*
{ after(grammarAccess.getOptionAccess().getContexteAssignment_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Option__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Option__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Option__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getOptionAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}













rule__SequenceProg__FeaturesAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceProgAccess().getFeaturesFeatureParserRuleCall_0_1_0()); }
	ruleFeature{ after(grammarAccess.getSequenceProgAccess().getFeaturesFeatureParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceProg__ContexteAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceProgAccess().getContexteContexteParserRuleCall_1_1_0()); }
	ruleContexte{ after(grammarAccess.getSequenceProgAccess().getContexteContexteParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getFeatureAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Contexte__ObjofAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContexteAccess().getObjofFeatureCrossReference_0_0_0()); }
(
{ before(grammarAccess.getContexteAccess().getObjofFeatureIDTerminalRuleCall_0_0_0_1()); }
	RULE_ID{ after(grammarAccess.getContexteAccess().getObjofFeatureIDTerminalRuleCall_0_0_0_1()); }
)
{ after(grammarAccess.getContexteAccess().getObjofFeatureCrossReference_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Contexte__SequenceAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContexteAccess().getSequenceSequenceParserRuleCall_0_1_0()); }
	ruleSequence{ after(grammarAccess.getContexteAccess().getSequenceSequenceParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Contexte__AlternativeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContexteAccess().getAlternativeAlternativeParserRuleCall_1_0()); }
	ruleAlternative{ after(grammarAccess.getContexteAccess().getAlternativeAlternativeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Contexte__LoopAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContexteAccess().getLoopLoopParserRuleCall_2_0()); }
	ruleLoop{ after(grammarAccess.getContexteAccess().getLoopLoopParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Contexte__OptionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContexteAccess().getOptionOptionParserRuleCall_3_0()); }
	ruleOption{ after(grammarAccess.getContexteAccess().getOptionOptionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__ConditionAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getConditionSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getConditionAccess().getConditionSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__ConditionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getConditionConditionParserRuleCall_1_0()); }
	ruleCondition{ after(grammarAccess.getLoopAccess().getConditionConditionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__ContexteAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getContexteContexteParserRuleCall_3_0()); }
	ruleContexte{ after(grammarAccess.getLoopAccess().getContexteContexteParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__ObjofRAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getObjofRFeatureCrossReference_1_0()); }
(
{ before(grammarAccess.getSequenceAccess().getObjofRFeatureIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getSequenceAccess().getObjofRFeatureIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getSequenceAccess().getObjofRFeatureCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__ConditionAltAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getConditionAltConditionParserRuleCall_1_0()); }
	ruleCondition{ after(grammarAccess.getAlternativeAccess().getConditionAltConditionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__ContexteIFAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getContexteIFContexteParserRuleCall_3_0()); }
	ruleContexte{ after(grammarAccess.getAlternativeAccess().getContexteIFContexteParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Alternative__ContexteELSEAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeAccess().getContexteELSEContexteParserRuleCall_5_0()); }
	ruleContexte{ after(grammarAccess.getAlternativeAccess().getContexteELSEContexteParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Option__ConditionOptAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionAccess().getConditionOptConditionParserRuleCall_1_0()); }
	ruleCondition{ after(grammarAccess.getOptionAccess().getConditionOptConditionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Option__ContexteAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionAccess().getContexteContexteParserRuleCall_3_0()); }
	ruleContexte{ after(grammarAccess.getOptionAccess().getContexteContexteParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


