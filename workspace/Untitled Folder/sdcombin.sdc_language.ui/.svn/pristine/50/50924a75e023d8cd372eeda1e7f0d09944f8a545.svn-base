/*
* generated by Xtext
*/
package sdcombin.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import sdcombin.services.SDCLangGrammarAccess;

public class SDCLangParser extends AbstractContentAssistParser {
	
	@Inject
	private SDCLangGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected sdcombin.ui.contentassist.antlr.internal.InternalSDCLangParser createParser() {
		sdcombin.ui.contentassist.antlr.internal.InternalSDCLangParser result = new sdcombin.ui.contentassist.antlr.internal.InternalSDCLangParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getContexteAccess().getAlternatives(), "rule__Contexte__Alternatives");
					put(grammarAccess.getSequenceProgAccess().getGroup(), "rule__SequenceProg__Group__0");
					put(grammarAccess.getSequenceProgAccess().getGroup_0(), "rule__SequenceProg__Group_0__0");
					put(grammarAccess.getSequenceProgAccess().getGroup_1(), "rule__SequenceProg__Group_1__0");
					put(grammarAccess.getContexteAccess().getGroup_0(), "rule__Contexte__Group_0__0");
					put(grammarAccess.getLoopAccess().getGroup(), "rule__Loop__Group__0");
					put(grammarAccess.getSequenceAccess().getGroup(), "rule__Sequence__Group__0");
					put(grammarAccess.getAlternativeAccess().getGroup(), "rule__Alternative__Group__0");
					put(grammarAccess.getOptionAccess().getGroup(), "rule__Option__Group__0");
					put(grammarAccess.getSequenceProgAccess().getFeaturesAssignment_0_1(), "rule__SequenceProg__FeaturesAssignment_0_1");
					put(grammarAccess.getSequenceProgAccess().getContexteAssignment_1_1(), "rule__SequenceProg__ContexteAssignment_1_1");
					put(grammarAccess.getFeatureAccess().getNameAssignment(), "rule__Feature__NameAssignment");
					put(grammarAccess.getContexteAccess().getObjofAssignment_0_0(), "rule__Contexte__ObjofAssignment_0_0");
					put(grammarAccess.getContexteAccess().getSequenceAssignment_0_1(), "rule__Contexte__SequenceAssignment_0_1");
					put(grammarAccess.getContexteAccess().getAlternativeAssignment_1(), "rule__Contexte__AlternativeAssignment_1");
					put(grammarAccess.getContexteAccess().getLoopAssignment_2(), "rule__Contexte__LoopAssignment_2");
					put(grammarAccess.getContexteAccess().getOptionAssignment_3(), "rule__Contexte__OptionAssignment_3");
					put(grammarAccess.getConditionAccess().getConditionAssignment(), "rule__Condition__ConditionAssignment");
					put(grammarAccess.getLoopAccess().getConditionAssignment_1(), "rule__Loop__ConditionAssignment_1");
					put(grammarAccess.getLoopAccess().getContexteAssignment_3(), "rule__Loop__ContexteAssignment_3");
					put(grammarAccess.getSequenceAccess().getObjofRAssignment_1(), "rule__Sequence__ObjofRAssignment_1");
					put(grammarAccess.getAlternativeAccess().getConditionAltAssignment_1(), "rule__Alternative__ConditionAltAssignment_1");
					put(grammarAccess.getAlternativeAccess().getContexteIFAssignment_3(), "rule__Alternative__ContexteIFAssignment_3");
					put(grammarAccess.getAlternativeAccess().getContexteELSEAssignment_5(), "rule__Alternative__ContexteELSEAssignment_5");
					put(grammarAccess.getOptionAccess().getConditionOptAssignment_1(), "rule__Option__ConditionOptAssignment_1");
					put(grammarAccess.getOptionAccess().getContexteAssignment_3(), "rule__Option__ContexteAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			sdcombin.ui.contentassist.antlr.internal.InternalSDCLangParser typedParser = (sdcombin.ui.contentassist.antlr.internal.InternalSDCLangParser) parser;
			typedParser.entryRuleSequenceProg();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SDCLangGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SDCLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
