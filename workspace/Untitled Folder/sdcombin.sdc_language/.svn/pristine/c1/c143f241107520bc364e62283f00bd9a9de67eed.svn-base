/*
* generated by Xtext
*/
grammar InternalSDCLang;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package sdcombin.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package sdcombin.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import sdcombin.services.SDCLangGrammarAccess;

}

@parser::members {

 	private SDCLangGrammarAccess grammarAccess;
 	
    public InternalSDCLangParser(TokenStream input, SDCLangGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "SequenceProg";	
   	}
   	
   	@Override
   	protected SDCLangGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSequenceProg
entryRuleSequenceProg returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSequenceProgRule()); }
	 iv_ruleSequenceProg=ruleSequenceProg 
	 { $current=$iv_ruleSequenceProg.current; } 
	 EOF 
;

// Rule SequenceProg
ruleSequenceProg returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='Features {' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSequenceProgAccess().getFeaturesKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceProgAccess().getFeaturesFeatureParserRuleCall_0_1_0()); 
	    }
		lv_features_1_0=ruleFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceProgRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_1_0, 
        		"Feature");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_2='}' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSequenceProgAccess().getRightCurlyBracketKeyword_0_2());
    }
)(	otherlv_3='Combination {' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSequenceProgAccess().getCombinationKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceProgAccess().getContexteContexteParserRuleCall_1_1_0()); 
	    }
		lv_contexte_4_0=ruleContexte		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceProgRule());
	        }
       		add(
       			$current, 
       			"contexte",
        		lv_contexte_4_0, 
        		"Contexte");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSequenceProgAccess().getRightCurlyBracketKeyword_1_2());
    }
))
;





// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureRule()); }
	 iv_ruleFeature=ruleFeature 
	 { $current=$iv_ruleFeature.current; } 
	 EOF 
;

// Rule Feature
ruleFeature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getFeatureAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFeatureRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleContexte
entryRuleContexte returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContexteRule()); }
	 iv_ruleContexte=ruleContexte 
	 { $current=$iv_ruleContexte.current; } 
	 EOF 
;

// Rule Contexte
ruleContexte returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getContexteRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getContexteAccess().getObjofFeatureCrossReference_0_0_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getContexteAccess().getSequenceSequenceParserRuleCall_0_1_0()); 
	    }
		lv_sequence_1_0=ruleSequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContexteRule());
	        }
       		set(
       			$current, 
       			"sequence",
        		lv_sequence_1_0, 
        		"Sequence");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getContexteAccess().getAlternativeAlternativeParserRuleCall_1_0()); 
	    }
		lv_alternative_2_0=ruleAlternative		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContexteRule());
	        }
       		set(
       			$current, 
       			"alternative",
        		lv_alternative_2_0, 
        		"Alternative");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getContexteAccess().getLoopLoopParserRuleCall_2_0()); 
	    }
		lv_loop_3_0=ruleLoop		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContexteRule());
	        }
       		set(
       			$current, 
       			"loop",
        		lv_loop_3_0, 
        		"Loop");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getContexteAccess().getOptionOptionParserRuleCall_3_0()); 
	    }
		lv_option_4_0=ruleOption		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContexteRule());
	        }
       		set(
       			$current, 
       			"option",
        		lv_option_4_0, 
        		"Option");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	 iv_ruleCondition=ruleCondition 
	 { $current=$iv_ruleCondition.current; } 
	 EOF 
;

// Rule Condition
ruleCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_condition_0_0=RULE_STRING
		{
			newLeafNode(lv_condition_0_0, grammarAccess.getConditionAccess().getConditionSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConditionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"condition",
        		lv_condition_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleLoop
entryRuleLoop returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLoopRule()); }
	 iv_ruleLoop=ruleLoop 
	 { $current=$iv_ruleLoop.current; } 
	 EOF 
;

// Rule Loop
ruleLoop returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='loop [' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLoopAccess().getLoopKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopAccess().getConditionConditionParserRuleCall_1_0()); 
	    }
		lv_condition_1_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_1_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='] {' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLoopAccess().getRightSquareBracketSpaceLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopAccess().getContexteContexteParserRuleCall_3_0()); 
	    }
		lv_contexte_3_0=ruleContexte		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopRule());
	        }
       		add(
       			$current, 
       			"contexte",
        		lv_contexte_3_0, 
        		"Contexte");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLoopAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleSequence
entryRuleSequence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSequenceRule()); }
	 iv_ruleSequence=ruleSequence 
	 { $current=$iv_ruleSequence.current; } 
	 EOF 
;

// Rule Sequence
ruleSequence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='seq' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSequenceAccess().getSeqKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSequenceRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getSequenceAccess().getObjofRFeatureCrossReference_1_0()); 
	}

)
))+
;





// Entry rule entryRuleAlternative
entryRuleAlternative returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAlternativeRule()); }
	 iv_ruleAlternative=ruleAlternative 
	 { $current=$iv_ruleAlternative.current; } 
	 EOF 
;

// Rule Alternative
ruleAlternative returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='alt [' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAlternativeAccess().getAltKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAlternativeAccess().getConditionAltConditionParserRuleCall_1_0()); 
	    }
		lv_conditionAlt_1_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAlternativeRule());
	        }
       		set(
       			$current, 
       			"conditionAlt",
        		lv_conditionAlt_1_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='] {' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAlternativeAccess().getRightSquareBracketSpaceLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAlternativeAccess().getContexteIFContexteParserRuleCall_3_0()); 
	    }
		lv_contexteIF_3_0=ruleContexte		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAlternativeRule());
	        }
       		add(
       			$current, 
       			"contexteIF",
        		lv_contexteIF_3_0, 
        		"Contexte");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_4='else' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAlternativeAccess().getElseKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAlternativeAccess().getContexteELSEContexteParserRuleCall_5_0()); 
	    }
		lv_contexteELSE_5_0=ruleContexte		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAlternativeRule());
	        }
       		add(
       			$current, 
       			"contexteELSE",
        		lv_contexteELSE_5_0, 
        		"Contexte");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAlternativeAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleOption
entryRuleOption returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionRule()); }
	 iv_ruleOption=ruleOption 
	 { $current=$iv_ruleOption.current; } 
	 EOF 
;

// Rule Option
ruleOption returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='opt [' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOptionAccess().getOptKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOptionAccess().getConditionOptConditionParserRuleCall_1_0()); 
	    }
		lv_conditionOpt_1_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOptionRule());
	        }
       		set(
       			$current, 
       			"conditionOpt",
        		lv_conditionOpt_1_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='] {' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOptionAccess().getRightSquareBracketSpaceLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOptionAccess().getContexteContexteParserRuleCall_3_0()); 
	    }
		lv_contexte_3_0=ruleContexte		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOptionRule());
	        }
       		add(
       			$current, 
       			"contexte",
        		lv_contexte_3_0, 
        		"Contexte");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOptionAccess().getRightCurlyBracketKeyword_4());
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


